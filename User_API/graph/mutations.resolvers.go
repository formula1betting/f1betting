package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"f1betting/betting_system"
	"f1betting/user_api/graph/model"
	"fmt"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUserProfile is the resolver for the updateUserProfile field.
func (r *mutationResolver) UpdateUserProfile(ctx context.Context, userID string, input model.UserProfileUpdateInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUserProfile - updateUserProfile"))
}

// UpdateUserEmail is the resolver for the updateUserEmail field.
func (r *mutationResolver) UpdateUserEmail(ctx context.Context, userID string, email string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUserEmail - updateUserEmail"))
}

// UpdateUserPassword is the resolver for the updateUserPassword field.
func (r *mutationResolver) UpdateUserPassword(ctx context.Context, userID string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateUserPassword - updateUserPassword"))
}

// UpdateUserStatus is the resolver for the updateUserStatus field.
func (r *mutationResolver) UpdateUserStatus(ctx context.Context, userID string, status model.AccountStatus) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUserStatus - updateUserStatus"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// VerifyUserEmail is the resolver for the verifyUserEmail field.
func (r *mutationResolver) VerifyUserEmail(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: VerifyUserEmail - verifyUserEmail"))
}

// CreatePodiumBet is the resolver for the createPodiumBet field.
func (r *mutationResolver) CreatePodiumBet(ctx context.Context, userID string, input model.PodiumBetInput) (*model.PodiumBet, error) {
	panic(fmt.Errorf("not implemented: CreatePodiumBet - createPodiumBet"))
}

// CreatePolePositionBet is the resolver for the createPolePositionBet field.
func (r *mutationResolver) CreatePolePositionBet(ctx context.Context, userID string, input model.PolePositionBetInput) (*model.PolePositionBet, error) {
	panic(fmt.Errorf("not implemented: CreatePolePositionBet - createPolePositionBet"))
}

// CreateRainBet is the resolver for the createRainBet field.
func (r *mutationResolver) CreateRainBet(ctx context.Context, userID string, input model.RainBetInput) (*model.RainBet, error) {
	panic(fmt.Errorf("not implemented: CreateRainBet - createRainBet"))
}

// CreateRetirementBet is the resolver for the createRetirementBet field.
func (r *mutationResolver) CreateRetirementBet(ctx context.Context, userID string, input model.RetirementBetInput) (*model.RetirementBet, error) {
	panic(fmt.Errorf("not implemented: CreateRetirementBet - createRetirementBet"))
}

// CreateFastestLapBet is the resolver for the createFastestLapBet field.
func (r *mutationResolver) CreateFastestLapBet(ctx context.Context, userID string, input model.FastestLapBetInput) (*model.FastestLapBet, error) {
	userIDInt, err := strconv.ParseInt(userID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid userID: %v", err)
	}

	var bet betting_system.FastestLapBet
	bet.SetFastestLapBet(userIDInt, int(input.SessionID), int32(input.DriverID), int64(input.BettingPool))

	betId, err := betting_system.CreateFastestLapBet(ctx, r.Conn, bet)

	if err != nil {
		return nil, err
	}

	return &model.FastestLapBet{
		ID:          strconv.FormatInt(betId, 10),
		UserID:      userID,
		SessionID:   input.SessionID,
		DriverID:    int32(bet.DriverID),
		Status:      model.BetStatus(bet.Status),
		Amount:      bet.Amount,
		BettingPool: int32(bet.BettingPool),
		CreatedAt:   bet.CreateAt.String(),
	}, nil

}

// CreateLapTimingBet is the resolver for the createLapTimingBet field.
func (r *mutationResolver) CreateLapTimingBet(ctx context.Context, userID string, input model.LapTimingBetInput) (*model.LapTimingBet, error) {
	panic(fmt.Errorf("not implemented: CreateLapTimingBet - createLapTimingBet"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
