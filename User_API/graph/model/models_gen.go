// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type FastestLapBet struct {
	ID          string    `json:"id"`
	UserID      string    `json:"userId"`
	SessionID   int32     `json:"sessionId"`
	DriverID    int32     `json:"driverId"`
	Status      BetStatus `json:"status"`
	Amount      float64   `json:"amount"`
	BettingPool int32     `json:"bettingPool"`
	CreatedAt   string    `json:"createdAt"`
}

type FastestLapBetInput struct {
	SessionID   int32 `json:"sessionId"`
	DriverID    int32 `json:"driverId"`
	BettingPool int32 `json:"bettingPool"`
}

type FastestLapUserPayout struct {
	DriverID string  `json:"driverId"`
	Payout   float64 `json:"payout"`
}

type Mutation struct {
}

type Query struct {
}

type User struct {
	ID                string        `json:"id"`
	FullName          string        `json:"fullName"`
	Email             string        `json:"email"`
	Username          string        `json:"username"`
	DateOfBirth       string        `json:"dateOfBirth"`
	PhoneNumber       *string       `json:"phoneNumber,omitempty"`
	GovernmentID      string        `json:"governmentId"`
	Address           string        `json:"address"`
	TaxID             *string       `json:"taxId,omitempty"`
	AccountStatus     AccountStatus `json:"accountStatus"`
	RegistrationDate  string        `json:"registrationDate"`
	Role              UserRole      `json:"role"`
	EmailVerified     bool          `json:"emailVerified"`
	Country           *string       `json:"country,omitempty"`
	PreferredCurrency *string       `json:"preferredCurrency,omitempty"`
	FavoriteTeam      *string       `json:"favoriteTeam,omitempty"`
	ProfilePictureURL *string       `json:"profilePictureUrl,omitempty"`
	Balance           float64       `json:"balance"`
}

type UserInput struct {
	FullName          string  `json:"fullName"`
	Email             string  `json:"email"`
	Username          string  `json:"username"`
	Password          string  `json:"password"`
	DateOfBirth       string  `json:"dateOfBirth"`
	PhoneNumber       *string `json:"phoneNumber,omitempty"`
	GovernmentID      string  `json:"governmentId"`
	Address           string  `json:"address"`
	TaxID             *string `json:"taxId,omitempty"`
	Country           *string `json:"country,omitempty"`
	PreferredCurrency *string `json:"preferredCurrency,omitempty"`
	FavoriteTeam      *string `json:"favoriteTeam,omitempty"`
	ProfilePictureURL *string `json:"profilePictureUrl,omitempty"`
}

type UserProfileUpdateInput struct {
	FullName          *string `json:"fullName,omitempty"`
	PhoneNumber       *string `json:"phoneNumber,omitempty"`
	Address           *string `json:"address,omitempty"`
	Country           *string `json:"country,omitempty"`
	PreferredCurrency *string `json:"preferredCurrency,omitempty"`
	FavoriteTeam      *string `json:"favoriteTeam,omitempty"`
}

type FastestLapBetsAndVisualizedPayout struct {
	FastestLapBets   []*FastestLapBet        `json:"fastestLapBets"`
	VisualizedPayout []*FastestLapUserPayout `json:"visualizedPayout"`
}

type AccountStatus string

const (
	AccountStatusActive    AccountStatus = "ACTIVE"
	AccountStatusSuspended AccountStatus = "SUSPENDED"
	AccountStatusBanned    AccountStatus = "BANNED"
	AccountStatusDeleted   AccountStatus = "DELETED"
)

var AllAccountStatus = []AccountStatus{
	AccountStatusActive,
	AccountStatusSuspended,
	AccountStatusBanned,
	AccountStatusDeleted,
}

func (e AccountStatus) IsValid() bool {
	switch e {
	case AccountStatusActive, AccountStatusSuspended, AccountStatusBanned, AccountStatusDeleted:
		return true
	}
	return false
}

func (e AccountStatus) String() string {
	return string(e)
}

func (e *AccountStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountStatus", str)
	}
	return nil
}

func (e AccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BetStatus string

const (
	BetStatusPending   BetStatus = "PENDING"
	BetStatusSettled   BetStatus = "SETTLED"
	BetStatusCancelled BetStatus = "CANCELLED"
)

var AllBetStatus = []BetStatus{
	BetStatusPending,
	BetStatusSettled,
	BetStatusCancelled,
}

func (e BetStatus) IsValid() bool {
	switch e {
	case BetStatusPending, BetStatusSettled, BetStatusCancelled:
		return true
	}
	return false
}

func (e BetStatus) String() string {
	return string(e)
}

func (e *BetStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BetStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BetStatus", str)
	}
	return nil
}

func (e BetStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleUser  UserRole = "USER"
	UserRoleAdmin UserRole = "ADMIN"
)

var AllUserRole = []UserRole{
	UserRoleUser,
	UserRoleAdmin,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleUser, UserRoleAdmin:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
